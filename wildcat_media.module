<?php

/**
 * @file
 * Improved media handling for Wildcat-flavored sites.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\media_entity\MediaBundleInterface;
use Drupal\views\Entity\View;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wildcat_media_form_entity_browser_wildcat_media_embed_form_alter(&$form, FormStateInterface &$form_state) {
  wildcat_media_attach_browser_to_form($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wildcat_media_form_entity_browser_wildcat_media_library_form_alter(&$form, FormStateInterface &$form_state) {
  wildcat_media_attach_browser_to_form($form);
}

/**
 * Implements hook_views_pre_render().
 *
 * Adds the media.view library to the media views.
 */
function wildcat_media_views_pre_render(ViewExecutable $view) {
  if (isset($view) && $view->id() == 'wildcat_media_library') {
    $view->element['#attached']['library'][] = 'wildcat_media/view';
  }
}

/**
 * Implements hook_menu_local_actions_alter().
 *
 * Adds the add media button from media_entity on library pages.
 */
function wildcat_media_menu_local_actions_alter(&$local_actions) {
  $local_actions['media.add']['appears_on'][] = 'view.wildcat_media_listing.user_media_library_page';
  $local_actions['media.add']['appears_on'][] = 'view.wildcat_media_listing.global_media_library_page';
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function wildcat_media_menu_links_discovered_alter(&$links) {
  // Update the route that links to the disabled media_entity module view.
  $links['entity.media.collection']['route_name'] = 'view.wildcat_media_listing.global_media_library_page';
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function wildcat_media_media_bundle_insert(MediaBundleInterface $bundle) {
  /** @var \Drupal\views\ViewEntityInterface $view */
  if ($view = View::load('wildcat_media_library')) {
    // Add cache tags for the new bundle to the media library view.
    foreach ($view->get('display') as $display_id => $display_info) {
      $display = $view->getDisplay($display_id);
      $existing_tags = &$display['cache_metadata']['tags'];
      $new_tags = [
        "config:core.entity_view_display.media.{$bundle->id()}.default",
        "config:core.entity_view_display.media.{$bundle->id()}.wildcat_media_library",
      ];
      foreach ($new_tags as $new_tag) {
        if (!in_array($new_tag, $existing_tags)) {
          $existing_tags[] = $new_tag;
        }
      }
    }

    $view->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function wildcat_media_media_bundle_delete(MediaBundleInterface $bundle) {
  /** @var \Drupal\views\ViewEntityInterface $view */
  if ($view = View::load('wildcat_media_library')) {
    // Remove cache tags for the deleted bundle from the media library view.
    foreach ($view->get('display') as $display_id => $display_info) {
      $display = $view->getDisplay($display_id);
      $existing_tags = &$display['cache_metadata']['tags'];
      $deleted_tags = [
        "config:core.entity_view_display.media.{$bundle->id()}.default",
        "config:core.entity_view_display.media.{$bundle->id()}.wildcat_media_library",
      ];
      $existing_tags = array_diff($existing_tags, $deleted_tags);
    }

    $view->save();
  }
}

/**
 * Attach media browser functionality into a form.
 *
 * @param array &$form
 *   Nested array of form elements that comprise the form.
 */
function wildcat_media_attach_browser_to_form(&$form) {
  // Style the submit button of the media library form.
  $form['actions']['submit']['#attributes']['class'][] = 'button--primary';
  $form['actions']['submit']['#attributes']['class'][] = 'entity-browser-modal-target';

  // Wrap actions so we can float them at the bottom of the browser.
  $form['actions_wrap'] = [
    '#type' => 'container',
    '#attributes' => [
      'class' => ['wildcat-media-browser-actions'],
    ],
  ];

  if (isset($form['actions'])) {
    $form['actions_wrap'][] = $form['actions'];
    unset($form['actions']);
  }

  if (isset($form['widget']) && isset($form['widget']['actions'])) {
    $form['actions_wrap'][] = $form['widget']['actions'];
    unset($form['widget']['actions']);
  }

  if (!empty($form['selection_display'])) {
    $form['selection_display']['#weight'] = 100;
    $form['actions_wrap'][] = $form['selection_display'];
    unset($form['selection_display']);
  }

  // Add a class for generic styling.
  $form['#attributes']['class'][] = 'wildcat-media-browser-form';
}
