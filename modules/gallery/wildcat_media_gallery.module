<?php

/**
 * @file
 * Support for media entity galleries or slideshows on Wildcat-flavored sites.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\media_entity\MediaBundleInterface;
use Drupal\views\Entity\View;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wildcat_media_gallery_views_exposed_form_wildcat_media_gallery_global_media_select_modal_form_alter(&$form, FormStateInterface &$form_state) {
  // Remove the Gallery option from create gallery view's bundle filters.
  unset($form['bundle_1']['#options']['gallery']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wildcat_media_gallery_views_exposed_form_wildcat_media_gallery_user_media_select_modal_form_alter(&$form, FormStateInterface &$form_state) {
  // Remove the Gallery option from create gallery view's bundle filters.
  unset($form['bundle_1']['#options']['gallery']);
}

/**
 * Implements hook_entity_type_alter().
 */
function wildcat_media_entity_type_alter(array &$entity_types) {
  $field_name = \Drupal::config('media_entity.bundle.wildcat_gallery')
    ->get('type_configuration.source_field');
  $entity_types['media']
    ->addConstraint('WildcatMediaGalleryBundle', [
      'sourceFieldName' => $field_name,
    ]);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function wildcat_media_gallery_media_bundle_insert(MediaBundleInterface $bundle) {
  // Add cache tags for the new bundle to the gallery library view.
  if ($view = View::load('wildcat_media_gallery')) {
    /** @var \Drupal\views\Plugin\views\display\DisplayPluginBase[] $displays */
    $displays = $view->get('display');

    foreach ($displays as $display_id => $display_info) {
      $display = $view->getDisplay($display_id);
      $existing_tags = &$display['cache_metadata']['tags'];
      $new_tags = [
        "config:core.entity_view_display.media.{$bundle->id()}.default",
        "config:core.entity_view_display.media.{$bundle->id()}.wildcat_media_preview",
      ];
      foreach ($new_tags as $new_tag) {
        if (!in_array($new_tag, $existing_tags)) {
          $existing_tags[] = $new_tag;
        }
      }
    }

    $view->save();
  }

  // Allow bundle to target bundles of wildcat_gallery_slide field.
  if ($bundle->getType()->getPluginId() != 'slideshow') {
    if ($field = FieldConfig::load('media.wildcat_gallery.wildcat_gallery_slide')) {
      if ($handler_settings = $field->getSetting('handler_settings')) {
        $handler_settings['target_bundles'][$bundle->id()] = $bundle->id();
        $field->setSetting('handler_settings', $handler_settings)->save();
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function wildcat_media_gallery_media_bundle_delete(MediaBundleInterface $bundle) {
  // Remove cache tags for the deleted bundle from the gallery library view.
  if ($view = View::load('wildcat_media_gallery')) {
    /** @var \Drupal\views\Plugin\views\display\DisplayPluginBase[] $displays */
    $displays = $view->get('display');

    foreach ($displays as $display_id => $display_info) {
      $display = $view->getDisplay($display_id);
      $existing_tags = &$display['cache_metadata']['tags'];
      $deleted_tags = [
        "config:core.entity_view_display.media.{$bundle->id()}.default",
        "config:core.entity_view_display.media.{$bundle->id()}.wildcat_media_preview",
      ];
      $existing_tags = array_diff($existing_tags, $deleted_tags);
    }

    $view->save();
  }

  // Remove bundle from wildcat_gallery_slide field target bundles.
  if ($bundle->getType()->getPluginId() != 'slideshow') {
    if ($field = FieldConfig::load('media.wildcat_gallery.wildcat_gallery_slide')) {
      if ($handler_settings = $field->getSetting('handler_settings')) {
        if (isset($handler_settings['target_bundles'][$bundle->id()])) {
          unset($handler_settings['target_bundles'][$bundle->id()]);
          $field->setSetting('handler_settings', $handler_settings)->save();
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wildcat_media_gallery_form_entity_browser_wildcat_media_gallery_form_alter(&$form, FormStateInterface &$form_state) {
  wildcat_media_customize_media_browser_form($form);
}

/**
 * Implements hook_views_pre_render().
 *
 * Adds the media.view library to the media views.
 */
function wildcat_media_gallery_views_pre_render(ViewExecutable $view) {
  if (isset($view) && $view->id() == 'wildcat_media_gallery') {
    $view->element['#attached']['library'][] = 'wildcat_media/browser';
  }
}
